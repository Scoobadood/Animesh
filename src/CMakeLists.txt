cmake_minimum_required(VERSION 3.8 FATAL_ERROR)

project(Animesh
		VERSION 0.1
		LANGUAGES CXX)

set(PROJECT_VERSION 0.2)

set(GIT_VERSION_STRING "git version 2.20.1 (Apple Git-117)")

set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -Wall")
set(CMAKE_CXX_FLAGS_RELEASE "-O2 -Wall")
set(CMAKE_CXX_FLAGS_DEBUG_COVERAGE "-g -O0 -Wall -fprofile-arcs -ftest-coverage")
set(CMAKE_CXX_FLAGS "")

# Tell cmake where to find VCG modules
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules")

# Write targets to bin directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../lib)

set(CMAKE_CXX_STANDARD 14)

add_definitions(-DGL_SILENCE_DEPRECATION)

# Need spdlog`
find_package(spdlog REQUIRED)

# Need Eigen3
find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})


# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(ext/nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})

# GLFW
find_package(glfw3 3.2 REQUIRED)
if (GLFW3_FOUND)
	include_directories(${GLFW3_INCLUDE_DIRS})
	target_link_libraries(foo ${GLFW3_LIBRARIES})
endif ()

# OpenGL
IF (APPLE)
	INCLUDE_DIRECTORIES(/System/Library/Frameworks)
	INCLUDE_DIRECTORIES(${GLM_INCLUDE_DIR})
	FIND_LIBRARY(COCOA_LIBRARY Cocoa)
	FIND_LIBRARY(GLUT_LIBRARY GLUT)
	FIND_LIBRARY(OpenGL_LIBRARY OpenGL)
	MARK_AS_ADVANCED(COCOA_LIBRARY
			GLUT_LIBRARY
			OpenGL_LIBRARY)
	SET(EXTRA_LIBS ${COCOA_LIBRARY} ${GLUT_LIBRARY} ${OpenGL_LIBRARY})
ENDIF (APPLE)
add_definitions(-DGL_SILENCE_DEPRECATION)

# Download and unpack googletest at configure time
configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
execute_process(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
		WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/googletest-download")
execute_process(COMMAND "${CMAKE_COMMAND}" --build .
		WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/googletest-download")

# Prevent GoogleTest from overriding our compiler/linker options
# when building with Visual Studio
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This adds
# the following targets: gtest, gtest_main, gmock
# and gmock_main
add_subdirectory("${CMAKE_BINARY_DIR}/googletest-src"
		"${CMAKE_BINARY_DIR}/googletest-build")

# Enable Test
enable_testing()


# Add libraries
#add_subdirectory( QtMain )
add_subdirectory(libArcBall)
add_subdirectory(libArgs)
add_subdirectory(libCamera)
add_subdirectory(libCorrespondence)
add_subdirectory(libDepthMap)
add_subdirectory(libFileUtils)
add_subdirectory(libGeom)
add_subdirectory(libGeomFileUtils)
add_subdirectory(libGraph)
add_subdirectory(libOptimise)
add_subdirectory(libPoSy)
add_subdirectory(libProperties)
add_subdirectory(libQuad)
add_subdirectory(libRoSy)
add_subdirectory(libSurfel)
add_subdirectory(libUtilities)
add_subdirectory(libVote)
add_subdirectory(mesher)
add_subdirectory(tools)
